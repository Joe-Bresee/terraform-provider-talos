// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// Code generated by "diskspec.go"; DO NOT EDIT.

package talos

import (
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/siderolabs/gen/xslices"
	"github.com/siderolabs/talos/pkg/machinery/resources/block"
)

type diskspec struct {
	DevPath        types.String `tfsdk:"dev_path"`
	Size           types.Int64  `tfsdk:"size"`
	PrettySize     types.String `tfsdk:"pretty_size"`
	IOSize         types.Int64  `tfsdk:"io_size"`
	SectorSize     types.Int64  `tfsdk:"sector_size"`
	Readonly       types.Bool   `tfsdk:"readonly"`
	CDROM          types.Bool   `tfsdk:"cdrom"`
	Model          types.String `tfsdk:"model"`
	Serial         types.String `tfsdk:"serial"`
	Modalias       types.String `tfsdk:"modalias"`
	WWID           types.String `tfsdk:"wwid"`
	UUID           types.String `tfsdk:"uuid"`
	BusPath        types.String `tfsdk:"bus_path"`
	SubSystem      types.String `tfsdk:"sub_system"`
	Transport      types.String `tfsdk:"transport"`
	Rotational     types.Bool   `tfsdk:"rotational"`
	SecondaryDisks types.List   `tfsdk:"secondary_disks"`
	Symlinks       types.List   `tfsdk:"symlinks"`
}

var diskspecAttributes = map[string]schema.Attribute{
	"dev_path": schema.StringAttribute{
		Computed: true,
	},
	"size": schema.Int64Attribute{
		Computed: true,
	},
	"pretty_size": schema.StringAttribute{
		Computed: true,
	},
	"io_size": schema.Int64Attribute{
		Computed: true,
	},
	"sector_size": schema.Int64Attribute{
		Computed: true,
	},
	"readonly": schema.BoolAttribute{
		Computed: true,
	},
	"cdrom": schema.BoolAttribute{
		Computed: true,
	},
	"model": schema.StringAttribute{
		Computed: true,
	},
	"serial": schema.StringAttribute{
		Computed: true,
	},
	"modalias": schema.StringAttribute{
		Computed: true,
	},
	"wwid": schema.StringAttribute{
		Computed: true,
	},
	"uuid": schema.StringAttribute{
		Computed: true,
	},
	"bus_path": schema.StringAttribute{
		Computed: true,
	},
	"sub_system": schema.StringAttribute{
		Computed: true,
	},
	"transport": schema.StringAttribute{
		Computed: true,
	},
	"rotational": schema.BoolAttribute{
		Computed: true,
	},
	"secondary_disks": schema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	},
	"symlinks": schema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	},
}

func diskspecToTFTypes(diskspecSpec block.DiskSpec) diskspec {
	return diskspec{
		DevPath:    types.StringValue(diskspecSpec.DevPath),
		Size:       types.Int64Value(int64(diskspecSpec.Size)),
		PrettySize: types.StringValue(diskspecSpec.PrettySize),
		IOSize:     types.Int64Value(int64(diskspecSpec.IOSize)),
		SectorSize: types.Int64Value(int64(diskspecSpec.SectorSize)),
		Readonly:   types.BoolValue(diskspecSpec.Readonly),
		CDROM:      types.BoolValue(diskspecSpec.CDROM),
		Model:      types.StringValue(diskspecSpec.Model),
		Serial:     types.StringValue(diskspecSpec.Serial),
		Modalias:   types.StringValue(diskspecSpec.Modalias),
		WWID:       types.StringValue(diskspecSpec.WWID),
		UUID:       types.StringValue(diskspecSpec.UUID),
		BusPath:    types.StringValue(diskspecSpec.BusPath),
		SubSystem:  types.StringValue(diskspecSpec.SubSystem),
		Transport:  types.StringValue(diskspecSpec.Transport),
		Rotational: types.BoolValue(diskspecSpec.Rotational),
		SecondaryDisks: types.ListValueMust(types.StringType, xslices.Map(diskspecSpec.SecondaryDisks, func(s string) attr.Value {
			return types.StringValue(s)
		})),
		Symlinks: types.ListValueMust(types.StringType, xslices.Map(diskspecSpec.Symlinks, func(s string) attr.Value {
			return types.StringValue(s)
		})),
	}
}
